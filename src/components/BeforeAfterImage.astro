---
import { Image } from 'astro:assets';

interface Props {
  beforeImage: ImageMetadata;
  afterImage: ImageMetadata;
  alt: string;
  class?: string;
}

const { beforeImage, afterImage, alt, class: className = '' } = Astro.props;
const uniqueId = `slider-${Math.random().toString(36).substr(2, 9)}`;
---

<div class={`before-after-slider relative ${className} select-none`} data-slider-id={uniqueId}>
  <!-- After Image (background) -->
  <div class="after-container w-full rounded-lg overflow-hidden shadow-lg">
    <Image
      src={afterImage}
      alt={`${alt} - después`}
      loading="eager"
      class="w-full h-full object-cover"
    />
  </div>

  <!-- Before Image (foreground with clip) -->
  <div class="before-container absolute inset-0 w-full rounded-lg overflow-hidden" style="clip-path: inset(0 50% 0 0);">
    <Image
      src={beforeImage}
      alt={`${alt} - antes`}
      loading="eager"
      class="w-full h-full object-cover"
    />
  </div>

  <!-- Slider Handle -->
  <div class="slider-handle absolute top-0 bottom-0 w-1 bg-white cursor-ew-resize" style="left: 50%;">
    <div class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-8 h-8 md:w-[26px] md:h-[26px] bg-white rounded-full shadow-lg"></div>
  </div>

  <!-- Labels -->
  <div class="absolute top-4 left-4 bg-black/60 text-white px-3 py-1 rounded-md text-sm font-semibold pointer-events-none">
    Antes
  </div>
  <div class="absolute top-4 right-4 bg-black/60 text-white px-3 py-1 rounded-md text-sm font-semibold pointer-events-none">
    Después
  </div>
</div>

<script>
  document.querySelectorAll('.before-after-slider').forEach((slider) => {
    const beforeContainer = slider.querySelector('.before-container') as HTMLElement;
    const handle = slider.querySelector('.slider-handle') as HTMLElement;
    let isDragging = false;

    const updateSlider = (x: number) => {
      const rect = slider.getBoundingClientRect();
      const offsetX = x - rect.left;
      const percentage = Math.max(0, Math.min(100, (offsetX / rect.width) * 100));
      
      beforeContainer.style.clipPath = `inset(0 ${100 - percentage}% 0 0)`;
      handle.style.left = `${percentage}%`;
    };

    const onMouseMove = (e: MouseEvent) => {
      if (isDragging) {
        updateSlider(e.clientX);
      }
    };

    const onTouchMove = (e: TouchEvent) => {
      if (isDragging && e.touches.length > 0) {
        updateSlider(e.touches[0].clientX);
      }
    };

    const stopDragging = () => {
      isDragging = false;
      document.removeEventListener('mousemove', onMouseMove);
      document.removeEventListener('mouseup', stopDragging);
      document.removeEventListener('touchmove', onTouchMove);
      document.removeEventListener('touchend', stopDragging);
    };

    handle.addEventListener('mousedown', (e) => {
      e.preventDefault();
      isDragging = true;
      document.addEventListener('mousemove', onMouseMove);
      document.addEventListener('mouseup', stopDragging);
    });

    handle.addEventListener('touchstart', (e) => {
      e.preventDefault();
      isDragging = true;
      document.addEventListener('touchmove', onTouchMove, { passive: false });
      document.addEventListener('touchend', stopDragging);
    });

    // Click anywhere on slider to move handle
    slider.addEventListener('click', (e) => {
      if (e.target !== handle && !handle.contains(e.target as Node)) {
        updateSlider((e as MouseEvent).clientX);
      }
    });
  });
</script>

<style>
  .before-after-slider {
    touch-action: none;
    max-height: calc(100% - 100px);
  }
  
  .before-after-slider .after-container,
  .before-after-slider .before-container {
    max-height: 560px;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .before-after-slider img {
    object-position: center center;
    width: 100%;
    height: 100%;
  }
</style>

